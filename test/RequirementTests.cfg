// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractBaseConstruction

    // Contract text
    title = RTC - BaseConstruction
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a docking at the specified celestial body.
    REQUIREMENT
    {
        name = BaseConstruction1
        type = BaseConstruction

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractDocking

    // Contract text
    title = RTC - Docking
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a docking at the specified celestial body.
    REQUIREMENT
    {
        name = Docking1
        type = Docking

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractEscape

    // Contract text
    title = RTC - Escape
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for escaping the specified celestial body.
    REQUIREMENT
    {
        name = Escape1
        type = Escape

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFlyBy

    // Contract text
    title = RTC - FlyBy
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for performing a fly-by of the specified celestial body.
    REQUIREMENT
    {
        name = FlyBy1
        type = FlyBy

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractLanding

    // Contract text
    title = RTC - Landing
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for landing on the specified celestial body.
    REQUIREMENT
    {
        name = Landing1
        type = Landing

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractOrbit

    // Contract text
    title = RTC - Orbit
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for orbiting the specified celestial body.
    REQUIREMENT
    {
        name = Orbit1
        type = Orbit

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractRendezvous

    // Contract text
    title = RTC - Rendezvous
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a rendezvous near the specified celestial body.
    REQUIREMENT
    {
        name = Rendezvous1
        type = Rendezvous

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromFlyBy

    // Contract text
    title = RTC - ReturnFromFlyBy
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from a fly-by of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromFlyBy1
        type = ReturnFromFlyBy

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromOrbit

    // Contract text
    title = RTC - ReturnFromOrbit
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from orbit of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromOrbit1
        type = ReturnFromOrbit

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromSurface

    // Contract text
    title = RTC - ReturnFromSurface
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from orbit of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromSurface1
        type = ReturnFromSurface

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Duna
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSplashDown

    // Contract text
    title = RTC - SplashDown
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for splashing down on the specified celestial body.
    REQUIREMENT
    {
        name = SplashDown1
        type = SplashDown

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSurfaceEVA

    // Contract text
    title = RTC - SurfaceEVA
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a surface EVA on the specified celestial body.
    REQUIREMENT
    {
        name = SurfaceEVA1
        type = SurfaceEVA

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractPartUnlocked

    // Contract text
    title = RTC - PartUnlocked
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having a certain part unlocked from the tech tree
    REQUIREMENT
    {
        name = PartUnlocked1
        type = PartUnlocked

        // Part name that needs to be unlocked.
        part = SmallGearBay
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractPartModuleUnlocked

    // Contract text
    title = RTC - PartModuleUnlocked
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having a certain part unlocked from the tech tree
    REQUIREMENT
    {
        name = PartModuleUnlocked1
        type = PartModuleUnlocked

        // PartModule that needs to be unlocked
        partModule = ModuleReactionWheel
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAltitudeRecord

    // Contract text
    title = RTC - AltitudeRecord
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having reached a minimum launch altitude
    REQUIREMENT
    {
        name = AltitudeRecord1
        type = AltitudeRecord

        // Minimum altitude that must have been reached
        minAltitude = 30000
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFirstCrewToSurvive

    // Contract text
    title = RTC - FirstCrewToSurvive
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having had a crew return successfully.
    REQUIREMENT
    {
        name = FirstCrewToSurvive1
        type = FirstCrewToSurvive
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFirstLaunch

    // Contract text
    title = RTC - FirstLaunch
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having made the first launch
    REQUIREMENT
    {
        name = FirstLaunch1
        type = FirstLaunch
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractKSCLanding

    // Contract text
    title = RTC - KSCLanding
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having landed at the KSC
    REQUIREMENT
    {
        name = KSCLanding1
        type = KSCLanding
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractRunwayLanding

    // Contract text
    title = RTC - RunwayLanding
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having landed on the runway
    REQUIREMENT
    {
        name = RunwayLanding1
        type = RunwayLanding
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReachSpace

    // Contract text
    title = RTC - ReachSpace
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having reached space
    REQUIREMENT
    {
        name = ReachSpace1
        type = ReachSpace
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSpaceCrewTransfer

    // Contract text
    title = RTC - SpaceCrewTransfer
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having done a crew transfer in space
    REQUIREMENT
    {
        name = SpaceCrewTransfer1
        type = SpaceCrewTransfer
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSpacewalk

    // Contract text
    title = RTC - Spacewalk
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having done a spacewalk
    REQUIREMENT
    {
        name = Spacewalk1
        type = Spacewalk
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractTechResearched

    // Contract text
    title = RTC - TechResearched
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having researched a technology
    REQUIREMENT
    {
        name = TechResearched1
        type = TechResearched

        // The technology that needs to have been researched.  Take special note that this does not
        // get validated - if you make a typo, the requirement will always return false.
        tech = basicRocketry
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractCompleteContract

    // Contract text
    title = RTC - CompleteContract
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = Param
        type = ReachAltitudeEnvelope

        minAltitude = 5000
        maxAltitude = 10000
    }

    // Requirement for having a certain number of contracts completed of the given type.
    REQUIREMENT
    {
        name = CompleteContract1
        type = CompleteContract

        // The type of contract being checked.  This can either be a ContractConfigurator contract
        // type or a standard contract type (class).
        contractType = SimpleTestContract

        // The minimum number of times the given contract type must have been completed before
        // the requirement is met.
        // Default = 1
        minCount = 1

        // The maximum number of times the given contract type can be completed before the
        // requirement will no longer be met.
        // Default = Infinite
        maxCount = 5
    }

    REQUIREMENT
    {
        name = CompleteContract2
        type = CompleteContract

        // The type of contract being checked.  This can either be a ContractConfigurator contract
        // type or a standard contract type (class).
        contractType = RequirementTestContractCompleteContract

        minCount = 0

        // The amount of time after the last instance of the contract was
        // complete before we can attempt again.
        cooldownDuration = 10d
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAny

    // Contract text
    title = RTC - Any
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Set requirement - is met if any child requirement is met.
    REQUIREMENT
    {
        name = Any1
        type = Any

        REQUIREMENT
        {
            name = ReachSpace1
            type = ReachSpace
        }

        REQUIREMENT
        {
            name = TechResearched1
            type = TechResearched

            tech = basicRocketry
        }
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAll

    // Contract text
    title = RTC - All
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Set requirement - is met if all child requirements are met.
    REQUIREMENT
    {
        name = All1
        type = All

        REQUIREMENT
        {
            name = ReachSpace1
            type = ReachSpace
        }

        REQUIREMENT
        {
            name = TechResearched1
            type = TechResearched

            tech = basicRocketry
        }
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestHasKerbal

    // Contract text
    title = RTC - HasKerbal
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Checks if the player has Kerbals matching the parameters on the roster.
    REQUIREMENT
    {
        name = HasCrew
        type = HasCrew

        // (Optional) The type of trait required.  Valid values are:
        //    Pilot
        //    Engineer
        //    Scientist
        trait = Engineer

        // (Optional) Minimum and maximum experience level.  Default values are
        // 0 and 5 (for min/max).
        minExperience = 2
        maxExperience = 5

        // (Optional) Minimum and maximum count.  Default values are 1 and
        // int.MaxValue (for min/max).
        minCount = 1
        maxCount = 5

    }
}
