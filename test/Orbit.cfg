CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = OrbitGenerator

    // Contract text
    title = OrbitGenerator
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000000.0
    rewardScience = 100.0

    maxSimultaneous = 1

    PARAMETER
    {
        name = VesselParameterGroup1
        type = VesselParameterGroup

        // The text to display.
        // Default - Do the following for <duration>
        //title = 

        // The duration that the conditions must be satisfied for.  Can specify values in
        // years (y), days (d), hours (h), minutes (m), seconds (s) or any combination of those.
        duration = 10d 2h


        PARAMETER
        {
            name = ReachSpecificOrbit1
            type = ReachSpecificOrbit

            // The index (0-based) in the OrbitGenerator behaviour of the orbit we
            // wish to reference.
            // Default = 0
            index = 0
        }

    }

    BEHAVIOUR
    {
        name = OrbitGenerator
        type = OrbitGenerator

        // Use this to generate an orbit with specific parameters
        FIXED_ORBIT
        {
            // Body for the orbit - defaulted from the contract if not supplied
            targetBody = Kerbin

            // Actual orbit details. Note that REF represents the reference
            // body - but will be overriden by the targetBody.
            ORBIT
            {
                SMA = 1449999.99996286
                ECC = 1.07570816555399E-05
                INC = 0
                LPE = 270.690311604893
                LAN = 1.93635924563296
                MNA = 1.55872660382504
                EPH = 31.3999999999994
                REF = 1
            }
        }

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // Body for the orbit - defaulted from the contract if not supplied
            targetBody = Kerbin

            // Type of orbit to generate.  Valid values are from
            // FinePrint.Utilities.OrbitType:
            //    EQUATORIAL
            //    KOLNIYA
            //    POLAR
            //    RANDOM
            //    STATIONARY
            //    SYNCHRONOUS
            //    TUNDRA
            type = KOLNIYA

            // Difficulty multiplier - generally makes the orbits harder to
            // reach if you increase it.
            // Default = 1.0
            difficulty = 10.0
        }

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // Body for the orbit - defaulted from the contract if not supplied
            targetBody = Kerbin

            // Type of orbit to generate.  Valid values are from
            // FinePrint.Utilities.OrbitType:
            //    EQUATORIAL
            //    KOLNIYA
            //    POLAR
            //    RANDOM
            //    STATIONARY
            //    SYNCHRONOUS
            //    TUNDRA
            type = POLAR
        }

        // Use this to generate an orbit with some randomization
        RANDOM_ORBIT
        {
            // Body for the orbit - defaulted from the contract if not supplied
            targetBody = Kerbin

            // Type of orbit to generate.  Valid values are from
            // FinePrint.Utilities.OrbitType:
            //    EQUATORIAL
            //    KOLNIYA
            //    POLAR
            //    RANDOM
            //    STATIONARY
            //    SYNCHRONOUS
            //    TUNDRA
            type = TUNDRA
        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = OrbitTest

    // Contract text
    title = OrbitTest
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000000.0
    rewardScience = 100.0

    maxSimultaneous = 1

    PARAMETER
    {
        name = VesselParameterGroup1
        type = VesselParameterGroup

        // The text to display.
        // Default - Do the following for <duration>
        //title = 

        // The duration that the conditions must be satisfied for.  Can specify values in
        // years (y), days (d), hours (h), minutes (m), seconds (s) or any combination of those.
        duration = 10d 2h

        PARAMETER
        {
            name = OrbitApoapsis
            type = OrbitApoapsis

            disableOnStateChange = false

            // Target body, defaulted from the contract if not supplied.
            targetBody = Kerbin

            // Minimum apoapsis in meters.
            // Default = 0
            minApA = 100000

            // Maximum apoapsis in meters.
            // Default = double.MaxValue
            maxApA = 250000
        }

        PARAMETER
        {
            name = OrbitPeriapsis
            type = OrbitPeriapsis

            disableOnStateChange = false

            // Target body, defaulted from the contract if not supplied.
            targetBody = Kerbin

            // Minimum periapsis in meters.
            // Default = 0
            minPeA = 100000

            // Maximum periapsis in meters.
            // Default = double.MaxValue
            maxPeA = 250000
        }

        PARAMETER
        {
            name = OrbitEccentricity
            type = OrbitEccentricity

            disableOnStateChange = false

            // Target body, defaulted from the contract if not supplied.
            targetBody = Kerbin

            // Minimum eccentricity.
            // Default = 0
            minEccentricity = 0.0

            // Maximum eccentricity.
            // Default = double.MaxValue
            maxEccentricity = 0.1
        }

        PARAMETER
        {
            name = OrbitInclination
            type = OrbitInclination

            disableOnStateChange = false

            // Target body, defaulted from the contract if not supplied.
            targetBody = Kerbin

            // Minimum inclination in degrees
            // Default = 0
            minInclination = 0

            // Maximum inclination in degrees
            // Default = 180
            maxInclination = 180
        }

    }
}
