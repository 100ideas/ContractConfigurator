// ContractConfiguration sample file

// Each CONTRACT_TYPE node represents a type of contract that can be offered
CONTRACT_TYPE
{
    // Unique name of the contract type (required)
    name = SimpleTestContract

    // Contract text details
    title = Simple Test Contract
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Agent (agency).  If not populated, a random agent will be selected.
    agent = Integrated Integrals

    // Contract min/max expiry in days.  Default is a contract that does not expire.
    minExpiry = 500.0
    maxExpiry = 1000.0

    // Contract deadline in days.  Default is no deadline.
    deadline = 500

    // Controls for whether a contract can be declined or cancelled, default is true for both
    cancellable = true
    declinable = true

    // Prestige.  If not specified, this contract type will be available at any prestige level.
    // Otherwise, locked to the level specified.  Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Significant

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric values (increasing science, etc.).  Also gets used in some of the
    // parameter classes.
    //
    // Default = null (no celestial body)
    targetBody = Kerbin

    // The maximum number of times this contract type can be completed (0 being unlimited).
    // Default = 0
    maxCompletions = 3

    // The maximum instances of this contract that can be active at one time (0 being unlimited).
    // Default = 0
    maxSimultaneous = 1

    // Contract rewards
    rewardScience = 100.0
    rewardReputation = 20.0
    rewardFunds = 100000.0
    failureReputation = 10.0
    failureFunds = 10000.0
    advanceFunds = 10000.0

    // The PARAMETER node defines a contract parameter.  The following parameter displays all the
    // fields that are supported for a parameter across all types.  See the ParameterTestContract
    // for examples of all supported parameters.
    PARAMETER
    {
        // The parameter name is not used, but should be provided to allow for the possibility of
        // other mods modifying contracts via ModuleManager.
        name = Param1

        // The type defines the type of Parameter.  See below for all supported
        // ContractConfigurator parameters
        type = AltitudeRecord

        // This is a parameter specific to the AltituteRecord parameter type.  Each parameter type
        // can have include its own custom fields.
        altitude = 45000

        // Target celestial body.  Defaults to the targetBody of the contract.  For most
        // parameters this only has an impacton the reward/failure amounts
        targetBody = Kerbin

        // Parameter rewards
        rewardScience = 100.0
        rewardReputation = 20.0
        rewardFunds = 100000.0
        failureReputation = 10.0
        failureFunds = 10000.0

        // When the parameter's state changes to completed or failed, disable the parameter.  Use
        // a value of false if you are trying to make something behave like the Squad part test
        // contract.  Example, if the parameter says you need to be between 1000 and 2000 meters
        // altitude then setting this to false will make the parameter go back to incomplete if you
        // enter and leave the altitude window.
        //
        // Default = true
        disableOnStateChange = true

        // Optional parameters do not need to be completed (mainly for use with composite
        // parameters)
        optional = true
    }

    REQUIREMENT
    {
        // The requirement name is not used, but should be provided to allow for the possibility of
        // other mods modifying contracts via ModuleManager.
        name = Requirement1

        // The type defines the type of Requirement.  See below for all supported
        // ContractConfigurator requirements.
        type = ReachSpace

        // The invertRequirement is a logical NOT.  In this example, the requirement becomes that
        // the player must not yet have reached space.
        //
        // Default = false
        invertRequirement = true
    }
}


// This contract shows all the different parameters that can be used.
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ParameterTestContract

    // Contract text
    title = Parameter Test Contract
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Controls for whether a contract can be declined or cancelled, default is true for both
    cancellable = false
    declinable = true

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0
    rewardFunds = 100000.0

    //
    // PARAMETERS
    //
    // The following sections lists all the valid ContractConfigurator parameters.  Others can
    // be added outside of ContractConfigurator by subclassing ParameterFactory.

    // The AltituteRecord parameter is met when a craft reaches the given altitude on Kerbin.
    PARAMETER
    {
        name = AltitudeRecord1
        type = AltitudeRecord
        altitude = 55000
    }
    // The CollectScience parameter is met when science is sent home from the given location
    // and celestial body
    PARAMETER
    {
        name = CollectScience1
        type = CollectScience

        // This can be inherited from the the contract type if necessary
        targetBody = Duna

        // Valid values are "Surface" and "Space"
        location = Space
    }

    // The EnterOrbit parameter is met when a craft enters an orbit of the given celestial body
    PARAMETER
    {
        name = EnterOrbit1
        type = EnterOrbit

        // This can be inherited from the the contract type if necessary
        targetBody = Duna
    }

    // The EnterSOI parameter is met when a craft enters the sphere of influence of the given
    // celestial body
    PARAMETER
    {
        name = EnterSOI1
        type = EnterSOI

        // This can be inherited from the the contract type if necessary
        targetBody = Duna
    }

    // The KerbalDeaths parameter *fails* if more Kerbals than the countMax die
    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths

        // Maximum Number of Kerbals that can die before this contract is considered failed
        // Default = 0
        countMax = 1
    }

    // The LandOnBody parameter is met when a craft lands on the given celestial body
    PARAMETER
    {
        name = LandOnBody1
        type = LandOnBody

        // This can be inherited from the the contract type if necessary
        targetBody = Duna
    }

    // Among the easier parameters - launch a vessel!
    PARAMETER
    {
        name = LaunchVessel1
        type = LaunchVessel
    }

    // The PlantFlag parameter is met when planting a flag on the given body
    PARAMETER
    {
        name = PlantFlag1
        type = PlantFlag

        // This can be inherited from the the contract type if necessary
        targetBody = Duna
    }

    // Get to a specific altitude envelope.  Note that this is not tied to a specific celestial
    // body - to do that you need to use multiple parameters together (and set the
    // disableOnStateChange flag to false).
    PARAMETER
    {
        name = ReachAltitudeEnvelope1
        type = ReachAltitudeEnvelope

        // Minimum and maximum altitudes, required
        minAltitude = 20000
        maxAltitude = 50000

        // Text to use for the parameter
        // Default = Altitude: Between <minAltitude> and <maxAltitude> meters
        //title = 
    }


    // Get to a specific speed envelope.  Note that this is not tied to a specific celestial
    // body - to do that you need to use multiple parameters together (and set the
    // disableOnStateChange flag to false).
    PARAMETER
    {
        name = ReachSpeedEnvelope1
        type = ReachSpeedEnvelope

        // Minimum and maximum speeds, required
        minSpeed = 1000
        maxSpeed = 5000

        // Text to use for the parameter
        // Default = Speed: Between <minSpeed> and <maxSpeed> m/s
        //title = 
    }

    // Reach a specific Biome.
    // NOTE - I can't seem to get this one working!  If someone does get this to work for them, let
    // me know.
    PARAMETER
    {
        name = ReachBiome1
        type = ReachBiome

        // The name of the biome to reach.
        biome = Shores

        // Text for the contract parameter.  Note that the biome name is always appended.
        // Default = Biome: <biome>
        title = Relax on Kerbin's Shores
    }

    // Reach a specific celestial object.
    PARAMETER
    {
        name = ReachDestination1
        type = ReachDestination

        // This can be inherited from the the contract type if necessary
        targetBody = Duna

        // Text for the contract parameter.  The name of the target body is always appended to this
        // text (blame Squad!).
        // Default = Destination: <targetBody>
        //title = 
    }

    // Reach a specific situation.
    PARAMETER
    {
        name = ReachSituation1
        type = ReachSituation

        // The situation.  Valid values from Vessel.Situations:
        //    DOCKED
        //    ESCAPING
        //    FLYING
        //    LANDED
        //    ORBITING
        //    PRELAUNCH
        //    SPLASHED
        //    SUB_ORBITAL
        situation = FLYING

        // Text for the contract parameter.  The name of the situation is always appended to this
        // text.
        // Default = Situation: <situation>
        //title = 
    }

    // Return from a place and situtation
    PARAMETER
    {
        name = ReturnFrom1
        type = ReturnFrom

        // The target to return from.  If not specified will default from the
        // Contract.
        targetBody = Mun

        // The situation.  Valid values from KSPAchievements.ReturnFrom
        //    Flight
        //    FlyBy
        //    Orbit
        //    SubOrbit
        //    Surface
        situation = Surface

        // Text for the contract parameter.
        // Default = Return from <situation> on <targetBody>.
        //title = 
    }

    // Go to space.  That's it.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // The BoardAnyVessel parameter is met when the named Kerbal boards a vessel (this one is
    // from the Squad "rescue" contracts and is a little bit less useful on its own.
    PARAMETER
    {
        name = BoardAnyVessel1
        type = BoardAnyVessel

        // The Kerbal that needs to board a vessel
        kerbal = Jebediah Kermin

        // Text to use for the parameter
        // Default = <kerbal>: Board a vessel
        //title = 
    }

    // The RecoverKerbal parameter is met when the named Kerbal is "recovered" (ie. goes back
    // in to the available list at the astronaut complex).  This is from the Squad "rescue"
    // contracts.
    PARAMETER
    {
        name = RecoverKerbal1
        type = RecoverKerbal

        // The Kerbal to be recovered
        kerbal = Jebediah Kermin

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    // PartTest is for testing parts (or just activating them, for staged parts).  This parameter
    // supports child parameters - you will only be able to complete the part test if all child
    // parameters are also completed.
    PARAMETER
    {
        name = PartTest1
        type = PartTest

        // The Kerbal to be recovered
        part = SmallGearBay

        // Additional notes to display (in the Squad PartTest contract, this is where they say
        // "Activate through the staging system", etc.
        // Optional
//        notes = Test this part anywhere, no other requirements!
    }

    // The Any parameter doesn't provide anything on its own.  It will be completed if any one
    // of its child parameters are completed.
    PARAMETER
    {
        name = Any1
        type = Any

        // The text to display.  Highly recommended that you do not use the default - when the
        // parameter is complete the text of the children disappears (and the default text doesn't
        // give the player a very good idea what the parameter was about).
        //
        // Default - Complete any ONE of the following
        title = Do this or that

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachSpace1
            type = ReachSpace
        }

        PARAMETER
        {
            name = ReachSpeedEnvelope1
            type = ReachSpeedEnvelope

            minSpeed = 1000
            maxSpeed = 5000
        }
    }

    // The All parameter doesn't provide anything on its own.  It is completed once all its child
    // parameters are completed.  Use it with disableOnStateChange = false to build conditions
    // similar to those in the Squad part test contracts.
    PARAMETER
    {
        name = All1
        type = All

        // The text to display.  Highly recommended that you do not use the default - when the
        // parameter is complete the text of the children disappears (and the default text doesn't
        // give the player a very good idea what the parameter was about).
        //
        // Default - Complete ALL of the following
        title = Do these things

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachAltitudeEnvelope1
            type = ReachAltitudeEnvelope

            disableOnStateChange = false

            minAltitude = 20000
            maxAltitude = 50000
        }

        PARAMETER
        {
            name = ReachSpeedEnvelope1
            type = ReachSpeedEnvelope

            disableOnStateChange = false

            minSpeed = 1000
            maxSpeed = 5000
        }
    }

    // The Duration parameter is similar to the All parameter, with the extra requirement that the
    // player must keep the child parameters satisfied for the specified duration.  Use it with
    // disableOnStateChange = false for the child parameters
    PARAMETER
    {
        name = VesselParameterGroup1
        type = VesselParameterGroup

        // The text to display.
        // Default - Do the following for <duration>
        //title = 

        // The duration that the conditions must be satisfied for.  Can specify values in
        // years (y), days (d), hours (h), minutes (m), seconds (s) or any combination of those.
        duration = 10d 2h

        // Child parameters look just like a regular parameter (and can be infinitely nested)
        PARAMETER
        {
            name = ReachSituation1
            type = ReachSituation

            disableOnStateChange = false

            situation = ORBITING
        }

        PARAMETER
        {
            name = ReachDestination1
            type = ReachDestination

            disableOnStateChange = false

            targetBody = Kerbin
        }
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractBaseConstruction

    // Contract text
    title = RTC - BaseConstruction
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a docking at the specified celestial body.
    REQUIREMENT
    {
        name = BaseConstruction1
        type = BaseConstruction

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractDocking

    // Contract text
    title = RTC - Docking
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a docking at the specified celestial body.
    REQUIREMENT
    {
        name = Docking1
        type = Docking

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractEscape

    // Contract text
    title = RTC - Escape
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for escaping the specified celestial body.
    REQUIREMENT
    {
        name = Escape1
        type = Escape

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFlyBy

    // Contract text
    title = RTC - FlyBy
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for performing a fly-by of the specified celestial body.
    REQUIREMENT
    {
        name = FlyBy1
        type = FlyBy

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractLanding

    // Contract text
    title = RTC - Landing
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for landing on the specified celestial body.
    REQUIREMENT
    {
        name = Landing1
        type = Landing

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractOrbit

    // Contract text
    title = RTC - Orbit
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for orbiting the specified celestial body.
    REQUIREMENT
    {
        name = Orbit1
        type = Orbit

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractRendezvous

    // Contract text
    title = RTC - Rendezvous
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a rendezvous near the specified celestial body.
    REQUIREMENT
    {
        name = Rendezvous1
        type = Rendezvous

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromFlyBy

    // Contract text
    title = RTC - ReturnFromFlyBy
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from a fly-by of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromFlyBy1
        type = ReturnFromFlyBy

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromOrbit

    // Contract text
    title = RTC - ReturnFromOrbit
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from orbit of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromOrbit1
        type = ReturnFromOrbit

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReturnFromSurface

    // Contract text
    title = RTC - ReturnFromSurface
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for returning from orbit of the specified celestial body.
    REQUIREMENT
    {
        name = ReturnFromSurface1
        type = ReturnFromSurface

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Duna
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSplashDown

    // Contract text
    title = RTC - SplashDown
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for splashing down on the specified celestial body.
    REQUIREMENT
    {
        name = SplashDown1
        type = SplashDown

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSurfaceEVA

    // Contract text
    title = RTC - SurfaceEVA
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for completing a surface EVA on the specified celestial body.
    REQUIREMENT
    {
        name = SurfaceEVA1
        type = SurfaceEVA

        // Target celestial body.  Defaults to the targetBody of the contract.
        targetBody = Kerbin
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractPartUnlocked

    // Contract text
    title = RTC - PartUnlocked
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having a certain part unlocked from the tech tree
    REQUIREMENT
    {
        name = PartUnlocked1
        type = PartUnlocked

        // Part name that needs to be unlocked.
        part = SmallGearBay
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAltitudeRecord

    // Contract text
    title = RTC - AltitudeRecord
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having reached a minimum launch altitude
    REQUIREMENT
    {
        name = AltitudeRecord1
        type = AltitudeRecord

        // Minimum altitude that must have been reached
        minAltitude = 30000
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFirstCrewToSurvive

    // Contract text
    title = RTC - FirstCrewToSurvive
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having had a crew return successfully.
    REQUIREMENT
    {
        name = FirstCrewToSurvive1
        type = FirstCrewToSurvive
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractFirstLaunch

    // Contract text
    title = RTC - FirstLaunch
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having made the first launch
    REQUIREMENT
    {
        name = FirstLaunch1
        type = FirstLaunch
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractKSCLanding

    // Contract text
    title = RTC - KSCLanding
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having landed at the KSC
    REQUIREMENT
    {
        name = KSCLanding1
        type = KSCLanding
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractRunwayLanding

    // Contract text
    title = RTC - RunwayLanding
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having landed on the runway
    REQUIREMENT
    {
        name = RunwayLanding1
        type = RunwayLanding
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractReachSpace

    // Contract text
    title = RTC - ReachSpace
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having reached space
    REQUIREMENT
    {
        name = ReachSpace1
        type = ReachSpace
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSpaceCrewTransfer

    // Contract text
    title = RTC - SpaceCrewTransfer
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having done a crew transfer in space
    REQUIREMENT
    {
        name = SpaceCrewTransfer1
        type = SpaceCrewTransfer
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractSpacewalk

    // Contract text
    title = RTC - Spacewalk
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having done a spacewalk
    REQUIREMENT
    {
        name = Spacewalk1
        type = Spacewalk
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractTechResearched

    // Contract text
    title = RTC - TechResearched
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having researched a technology
    REQUIREMENT
    {
        name = TechResearched1
        type = TechResearched

        // The technology that needs to have been researched.  Take special note that this does not
        // get validated - if you make a typo, the requirement will always return false.
        tech = basicRocketry
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractCompleteContract

    // Contract text
    title = RTC - CompleteContract
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Requirement for having a certain number of contracts completed of the given type.
    REQUIREMENT
    {
        name = CompleteContract1
        type = CompleteContract

        // The type of contract being checked.  This can either be a ContractConfigurator contract
        // type or a standard contract type (class).
        contractType = SimpleTestContract

        // The minimum number of times the given contract type must have been completed before
        // the requirement is met.
        // Default = 1
        minCount = 1

        // The maximum number of times the given contract type can be completed before the
        // requirement will no longer be met.
        // Default = Infinite
        maxCount = 5
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAny

    // Contract text
    title = RTC - Any
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Set requirement - is met if any child requirement is met.
    REQUIREMENT
    {
        name = Any1
        type = Any

        REQUIREMENT
        {
            name = ReachSpace1
            type = ReachSpace
        }

        REQUIREMENT
        {
            name = TechResearched1
            type = TechResearched

            tech = basicRocketry
        }
    }
}

// Contract for requirement test
CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RequirementTestContractAll

    // Contract text
    title = RTC - All
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    // Need at least one parameter.
    PARAMETER
    {
        name = ReachSpace1
        type = ReachSpace
    }

    // Set requirement - is met if all child requirements are met.
    REQUIREMENT
    {
        name = All1
        type = All

        REQUIREMENT
        {
            name = ReachSpace1
            type = ReachSpace
        }

        REQUIREMENT
        {
            name = TechResearched1
            type = TechResearched

            tech = basicRocketry
        }
    }
}
